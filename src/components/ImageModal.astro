---
import { Image } from "@astrojs/image/components";

export interface Props {
    imageId: string;
    imageSrc: string;
    imageAlt: string;
}

const { imageId, imageSrc, imageAlt } = Astro.props;
---

<!-- Trigger the Modal -->
<Image
    id={`image-${imageId}`}
    alt={imageAlt}
    src={import(imageSrc)}
    class="modal-image modal-image-cover rounded-md mb-4"
/>

<!-- The Modal -->
<div id="modal" class="modal">
    <!-- The Close Button -->
    <span class="close">&times;</span>

    <!-- Modal Content (The Image) -->
    <img
        class="modal-image modal-image-content modal-content"
        id={`modal-image-${imageId}`}
    />

    <!-- Modal Caption (Image Text) -->
    <div id={`caption-${imageId}`} class="caption"></div>
</div>

<style>
    /* Style the Image Used to Trigger the Modal */
    .image {
        border-radius: 5px;
        cursor: pointer;
        transition: 0.3s;
    }

    .image:hover {
        opacity: 0.7;
    }

    /* The Modal (background) */
    .modal {
        display: none; /* Hidden by default */
        position: fixed; /* Stay in place */
        z-index: 1; /* Sit on top */
        padding-top: 100px; /* Location of the box */
        left: 0;
        top: 0;
        width: 100%; /* Full width */
        height: 100%; /* Full height */
        overflow: auto; /* Enable scroll if needed */
        background-color: rgb(0, 0, 0); /* Fallback color */
        background-color: rgba(0, 0, 0, 0.9); /* Black w/ opacity */
    }

    /* Modal Content (Image) */
    .modal-content {
        margin: auto;
        display: block;
        width: 80%;
        max-width: 700px;
    }

    /* Caption of Modal Image (Image Text) - Same Width as the Image */
    .caption {
        margin: auto;
        display: block;
        width: 80%;
        max-width: 700px;
        text-align: center;
        color: #ccc;
        padding: 10px 0;
        height: 150px;
    }

    /* Add Animation - Zoom in the Modal */
    .modal-content,
    .caption {
        animation-name: zoom;
        animation-duration: 0.6s;
    }

    @keyframes zoom {
        from {
            transform: scale(0);
        }
        to {
            transform: scale(1);
        }
    }

    /* The Close Button */
    .close {
        position: absolute;
        top: 15px;
        right: 35px;
        color: #f1f1f1;
        font-size: 40px;
        font-weight: bold;
        transition: 0.3s;
    }

    .close:hover,
    .close:focus {
        color: #bbb;
        text-decoration: none;
        cursor: pointer;
    }

    /* 100% Image Width on Smaller Screens */
    @media only screen and (max-width: 700px) {
        .modal-content {
            width: 100%;
        }
    }
</style>

<script>
    // get the modal
    const modal = document.getElementById("modal") as HTMLDivElement;

    // get all modal images on the screen
    const images = document.getElementsByClassName(
        "modal-image"
    ) as HTMLCollectionOf<HTMLImageElement>;

    // for each image, get the image and insert it into the modal
    Array.from(images).forEach((img, index) => {
        // index always skips a step because we omit the modals
        const position = index === 0 ? 0 : index - 1;

        // only take into account the cover image
        // not the nested modal image
        const imgElement = Array.from(
            document.getElementsByClassName("modal-image-cover")
        ).find((el) => el.id === img.id) as HTMLImageElement | undefined;

        if (imgElement !== undefined) {
            imgElement.onclick = () => {
                // get the corresponding modal image container
                const modalImgElement = Array.from(
                    document.getElementsByClassName("modal-image-content")
                )[position] as HTMLImageElement | undefined;

                // get the corresponding caption text
                const captionElement = Array.from(
                    document.getElementsByClassName("caption")
                )[position] as HTMLDivElement | undefined;

                if (
                    modalImgElement !== undefined &&
                    captionElement !== undefined
                ) {
                    modal.style.display = "block";
                    modalImgElement.src = img.src;
                    captionElement.innerHTML = img.alt;
                }
            };
        }
        // Get the span element that closes the modal
        const span = document.getElementsByClassName(
            "close"
        )[0] as HTMLSpanElement;

        // close the modal
        span.onclick = () => {
            if (modal) {
                modal.style.display = "none";
            }
        };
    });
</script>
